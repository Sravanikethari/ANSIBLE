This is the simplest way to interact with Ansible. Ad-hoc commands are single-line commands

How It Works:
 1) run a single Ansible command to perform an action on your target machines (e.g., install a package, check system status, etc.).
 2) Useful for quick tasks like checking connectivity, gathering facts, or managing systems on the fly.
Examples: all the below examples for Ubuntu/Debian systems
 1) Gather system information 
    cmd- ansible all -a "uname -a"
 2) Install a package (e.g., Apache)
     cmd- ansible all -a "sudo apt-get install apache2 -y"  
 3) Start a service (e.g., Apache)
     cmd- ansible all -a "sudo systemctl start apache2"
 4) Stop a service (e.g., Apache)
     cmd- ansible all -a "sudo systemctl stop apache2"
 5) Create a file
     cmd- ansible all -a "touch /tmp/testfile"
 6) Copy a file
     cmd- ansible all -a "scp /path/to/local/file user@remote:/path/to/remote/file"
 7) Delete a file or directory
     cmd- ansible all -a "rm -f /tmp/testfile"
 8) Add a user
     cmd- ansible all -a "sudo useradd ansible_user"
 9) Set up a cron job
     cmd- ansible all -a "echo '0 5 * * * /usr/bin/backup.sh' | sudo tee -a /etc/crontab"
 10) Check free memory
     cmd- ansible all -a "free -m"
 11) Change the hostname of a system
     cmd- ansible all -a "sudo hostnamectl set-hostname webserver"
 12) Check if a package is installed (for apache)
     cmd- ansible all -a "dpkg -l | grep apache2"

