PLAYBOOKS:
Definition: An Ansible playbook is a collection of instructions used to automate tasks on remote hosts. 
Composition: Playbooks are composed of one or more plays, which are ordered lists of tasks. Each task invokes a specific Ansible module to perform actions like software installation or user management.
Reusability: Playbooks can be reused across different environments, making them highly versatile for managing and scaling infrastructure configurations5.

Key Features of Ansible Playbooks
 1) Automation: Playbooks automate IT tasks such as infrastructure provisioning, configuration management, and application deployment13.
 2) Multi-Module Execution: Multiple modules can be executed at once within a playbook, allowing for complex automation workflows1.
 3) YAML Syntax: Playbooks are written in YAML, a human-readable markup language that uses key-value pairs and sequences to define tasks and modules14.
 4) File Extensions: Playbooks typically have .yml or .yaml file extensions, with both being acceptable8.

Benefits of Using Ansible Playbooks
 1) Reusability: Playbooks can be saved, shared, and reused indefinitely, ensuring consistent execution of IT actions across different environments5.
 2) Flexibility: Playbooks can include roles, which are bundles of tasks and automation assets that can be reused across multiple plays or playbooks.
 3) Efficiency: By automating repetitive tasks, playbooks enhance operational efficiency and reduce manual effort5.

YAML Syntax Basics
 1) Key-Value Pairs: YAML uses key-value pairs to define parameters for modules and tasks within a playbook4.
 2) Sequences: YAML sequences are used to list tasks or plays in an ordered manner2.
 3) Mappings: Mappings in YAML are used to embed key-value pairs within sequences, such as defining play keywords like hosts and remote_user2.

Examples:
1) Install Apache and Start the Service
   playbook- 
   ---
 - name: Install and Start Apache
   hosts: all
  become: true  # Run as root user

  tasks:
    - name: Install Apache2 package
      apt:
        name: apache2
        state: present
        update_cache: yes

    - name: Start Apache2 service
      service:
        name: apache2
        state: started
        enabled: yes
2) Create a User and Set Up SSH Key Authentication
   playbook-
   ---
- name: Create a user and set up SSH keys
  hosts: all
  become: true  # Run as root user

  tasks:
    - name: Create a new user
      user:
        name: ansible_user
        state: present
        shell: /bin/bash

    - name: Ensure SSH directory exists
      file:
        path: "/home/ansible_user/.ssh"
        state: directory
        mode: '0700'
        owner: ansible_user
        group: ansible_user

    - name: Copy SSH key to the user
      copy:
        src: /path/to/public_key.pub
        dest: "/home/ansible_user/.ssh/authorized_keys"
        mode: '0600'
        owner: ansible_user
        group: ansible_user
3) Deploy a Configuration File Using a Template
   playbook-
   ---
- name: Deploy web server configuration file
  hosts: webservers
  become: true

  tasks:
    - name: Deploy the configuration file from template
      template:
        src: /path/to/template.j2
        dest: /etc/apache2/sites-available/000-default.conf
      notify:
        - Restart Apache

  handlers:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
4) Update All Packages
   playbook-
   ---
- name: Update all packages
  hosts: all
  become: true

  tasks:
    - name: Update all packages to the latest version
      apt:
        upgrade: dist
        update_cache: yes
5) Set Up a Cron Job for Backups
   playbook-
   ---
- name: Set up a cron job for backups
  hosts: all
  become: true

  tasks:
    - name: Add backup cron job
      cron:
        name: "Daily backup"
        minute: "0"
        hour: "0"
        job: "/usr/bin/backup.sh"
        state: present
6) Install and Configure Docker
   playbook-
   ---
- name: Install and configure Docker
  hosts: all
  become: true

  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes


